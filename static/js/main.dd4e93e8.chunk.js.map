{"version":3,"sources":["components/Add.js","components/New.js","components/Comments.js","App.js","serviceWorker.js","index.js"],"names":["Add","state","name","text","fullText","agree","className","hide","onBtnClickHandler","evt","preventDefault","_this$state","_this","props","onAddComments","id","Date","author","setState","handleChange","_evt$currentTarget","currentTarget","value","Object","defineProperty","handleCheckboxChange","checked","validate","_this$state2","trim","newCommentHandler","_this$state3","this","react_default","a","createElement","Fragment","onClick","type","onChange","placeholder","disabled","React","Component","New","visible","handleShowMoreClick","_this$props$data","data","href","Comments","renderComments","length","map","item","New_New","key","App","comments","isLoading","handleAddComments","nextComments","concat","toConsumableArray","_this2","fetch","then","response","json","setTimeout","Array","isArray","Comments_Comments","Add_Add","nextFilteredComments","forEach","index","toLowerCase","indexOf","filteredComments","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd4e93e8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Add extends React.Component {\r\n  state = {\r\n    name: \"\",\r\n    text: \"\",\r\n    fullText: \"\",\r\n    agree: false,\r\n    className: \"add hide\",\r\n    hide: true\r\n  };\r\n\r\n  onBtnClickHandler = (evt) => {\r\n    evt.preventDefault();\r\n    const {name, text, fullText} = this.state;\r\n    this.props.onAddComments({\r\n      id: +new Date(),\r\n      author: name,\r\n      text,\r\n      fullText\r\n    });\r\n    this.setState ({\r\n      className: \"add hide\",\r\n      hide: true\r\n    })\r\n  };\r\n\r\n  handleChange = evt => {\r\n    const { id, value } = evt.currentTarget;\r\n    this.setState({ [id]: value });\r\n  };\r\n\r\n  handleCheckboxChange = evt => {\r\n    this.setState({ agree: evt.currentTarget.checked });\r\n  };\r\n\r\n  validate = () => {\r\n    const { name, text, agree } = this.state;\r\n    if (name.trim() && text.trim() && agree) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  newCommentHandler = () => {\r\n    const {hide} = this.state\r\n    \r\n    if (hide) {\r\n      return (\r\n        this.setState ({\r\n          className: 'add',\r\n          hide: false\r\n        }) \r\n      )\r\n    }\r\n    return (\r\n      this.setState ({\r\n          className: 'add hide',\r\n          hide: true\r\n        })\r\n      )\r\n  }\r\n\r\n  render() {\r\n    const {name, text, fullText, className} = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <button \r\n          className=\"btn__addComment\"\r\n          onClick={this.newCommentHandler}\r\n          >Добавить комментарий</button>\r\n        <form className={className}>\r\n          <h3 className=\"newComment__title\">Добавить комментарий</h3>\r\n          <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            className=\"add__author\"\r\n            placeholder=\"Ваше имя\"\r\n            value={name}\r\n          />\r\n          <textarea\r\n            id=\"text\"\r\n            onChange={this.handleChange}\r\n            className=\"add__text\"\r\n            placeholder=\"Заголовок\"\r\n            value={text}\r\n          />\r\n          <textarea\r\n            id=\"fullText\"\r\n            onChange={this.handleChange}\r\n            className=\"add__text\"\r\n            placeholder=\"Комментарий\"\r\n            value={fullText}\r\n          />\r\n          <label className=\"add__checkrule\">\r\n            <input type=\"checkbox\" onChange={this.handleCheckboxChange} /> Я\r\n            согласен с правилами\r\n          </label>\r\n          <button\r\n            className=\"add__btn\"\r\n            onClick={this.onBtnClickHandler}\r\n            disabled={!this.validate()}\r\n          >Отправить\r\n          </button>\r\n        </form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nAdd.propTypes = {\r\n  onAddComments: PropTypes.func.isRequired\r\n};\r\n\r\nexport {Add}","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nclass New extends React.Component {\r\n  state = {\r\n    visible: false\r\n  };\r\n\r\n  handleShowMoreClick = evt => {\r\n    evt.preventDefault();\r\n    this.setState({ visible: true });\r\n  };\r\n\r\n  render() {\r\n    const { author, text, fullText } = this.props.data;\r\n    const { visible } = this.state;\r\n    return (\r\n      <article className=\"comments__new\">\r\n        <p className=\"comments__author\">{author}:</p>\r\n        <p className=\"comments__text\">{text}</p>\r\n        {!visible && (\r\n          <a\r\n            onClick={this.handleShowMoreClick}\r\n            href=\"#showmore\"\r\n            className=\"comments__showmore\"\r\n          >\r\n            Показать полный комментарий\r\n          </a>\r\n        )}\r\n        {visible && <p className=\"comments__fulltext\">{fullText}</p>}\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nNew.propTypes = {\r\n  data: PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    author: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    fullText: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport {New}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {New} from './New'\r\n\r\nclass Comments extends React.Component {\r\n  renderComments = () => {\r\n    const {data} = this.props\r\n    let commentsTemplate = null\r\n\r\n    if (data.length) {\r\n      commentsTemplate = data.map(function(item) {\r\n        return <New key={item.id} data={item} />\r\n      })\r\n    } else {\r\n      commentsTemplate = <p>Ещё никто не оставил комментариев</p>\r\n    }\r\n\r\n    return commentsTemplate\r\n  }\r\n                                  \r\n  render() {\r\n    return (\r\n      this.renderComments()\r\n    )\r\n  }\r\n}\r\n\r\nComments.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n}\r\n\r\nexport {Comments}","import React from 'react';\nimport {Add} from './components/Add'\nimport {Comments} from './components/Comments'\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    comments: null,\n    isLoading: false\n  };\n  \n   static getDerivedStateFromProps(props, state) {\n    let nextFilteredComments;\n\n    if (Array.isArray(state.comments)) {\n      nextFilteredComments = [...state.comments]\n\n      nextFilteredComments.forEach((item, index) => {\n        if (item.fullText.toLowerCase().indexOf('михалков') !== -1) {\n          item.fullText = 'СПАМ'\n        }\n      })\n\n      return {\n        filteredComments: nextFilteredComments,\n      }\n    }\n\n    return null\n  }\n\n  componentDidMount() {\n    this.setState ({isLoading: true})\n    fetch ('https://benuelbertran.github.io/comments/data/commentsData.json')\n      .then (response => {\n        return response.json()\n      })\n      .then (data => {\n        setTimeout(() => {\n          this.setState ({isLoading: false, comments: data})\n        }, 1500)\n      })\n  }\n\n  handleAddComments = data => {\n    const nextComments = [data, ...this.state.comments];\n    this.setState({comments: nextComments});\n  };\n\n  render() {\n    const {comments, isLoading} = this.state\n    \n    return (\n      <React.Fragment>\n        <div className=\"comments__wrapper\">\n          <h2 className=\"comments__title\">Комментарии</h2>\n          <p className=\"comments__subtitle\">Сначала новые:</p>\n          {isLoading && <p>Загружаю...</p>}\n          {Array.isArray(comments) && <Comments data={comments}/>}\n          <Add onAddComments={this.handleAddComments}/>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}